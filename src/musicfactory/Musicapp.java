/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package musicfactory;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import musicfactory.util.MusicValidationUtil;

/**
 *
 * @author chick
 */
public class Musicapp extends javax.swing.JFrame {

    private java.awt.CardLayout cardLayout;
    private List<MusicModel> musicList;
    private final MusicValidationUtil musicValidationUtil;
    private final Color errorColor = new Color(255, 51, 0);
    private final Color yellowColor = new Color(239, 192, 32);

    /**
     * Creates new form Musicapp
     */
    public Musicapp() {
        initComponents();
        startProgress();
        musicList = new LinkedList<>();
        musicValidationUtil = new MusicValidationUtil();
        initializeLayout();
//        registerMusic();
        loadDataFromFile();// Start the progress bar
    }

    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(pnlLoadingScreen, "LoadingScreen");
        getContentPane().add(pnlLoginScreen, "LoginScreen");
        getContentPane().add(pnlMainScreen, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }

    private void registerMusic() {
        // Registering sample students
        MusicModel music1 = new MusicModel(
                19057565, // Song ID
                "Lekhnath Tandukar", // Song Title
                "Radha", // Artist
                2500, // Views
                "Pop", // Genre
                LocalDate.of(2020, 10, 11) // Release Date (YYYY, MM, DD)
        );
        MusicModel music2 = new MusicModel(19057566, "Subin Chhetri", "Radha", 7500, "POP", LocalDate.of(2012, 12, 07));
        musicList.add(music1);
        musicList.add(music2);
        addListToTable();

    }

    // Start the progress simulation
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Simulate progress
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay (30ms for each step)
                    publish(i); // Publish progress value
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                // Update the progress bar with the latest value
                int progress = chunks.get(chunks.size() - 1);
                ProgressBar.setValue(progress);
            }

            @Override
            protected void done() {
                // Transition to the next screen after loading completes
                loadScreen("LoginScreen");
            }
        };

        worker.execute(); // Start the worker thread
    }

    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScreen = new javax.swing.JPanel();
        Tab3 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMusic = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        txtViews = new javax.swing.JTextField();
        txtSongId = new javax.swing.JTextField();
        txtSongTitle = new javax.swing.JTextField();
        txtArtist = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtReleaseDate = new javax.swing.JTextField();
        txtGenre = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pnlLoginScreen = new javax.swing.JPanel();
        txtUsername = new javax.swing.JTextField();
        txtpassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pnlLoadingScreen = new javax.swing.JPanel();
        ProgressBar = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        pnlMainScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlMainScreen.setMaximumSize(new java.awt.Dimension(800, 600));
        pnlMainScreen.setMinimumSize(new java.awt.Dimension(800, 600));
        pnlMainScreen.setPreferredSize(new java.awt.Dimension(800, 600));

        Tab3.setBackground(new java.awt.Color(0, 0, 0));
        Tab3.setForeground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 776, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );

        Tab3.addTab("tab2", jPanel1);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        tblMusic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Song Id", "Song Title", "Artist", "Views", "Genre", "Release Date"
            }
        ));
        jScrollPane1.setViewportView(tblMusic);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(btnDelete)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addGap(0, 103, Short.MAX_VALUE))
        );

        Tab3.addTab("Songs", jPanel3);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 776, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );

        Tab3.addTab("tab4", jPanel4);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setMaximumSize(new java.awt.Dimension(600, 800));
        jPanel2.setMinimumSize(new java.awt.Dimension(600, 800));
        jPanel2.setName(""); // NOI18N

        txtViews.setBackground(new java.awt.Color(0, 0, 0));
        txtViews.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtViews.setForeground(new java.awt.Color(255, 255, 255));
        txtViews.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Views Count", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        txtSongId.setBackground(new java.awt.Color(0, 0, 0));
        txtSongId.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtSongId.setForeground(new java.awt.Color(255, 255, 255));
        txtSongId.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Song Id", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        txtSongTitle.setBackground(new java.awt.Color(0, 0, 0));
        txtSongTitle.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtSongTitle.setForeground(new java.awt.Color(255, 255, 255));
        txtSongTitle.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Song Title", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        txtArtist.setBackground(new java.awt.Color(0, 0, 0));
        txtArtist.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtArtist.setForeground(new java.awt.Color(255, 255, 255));
        txtArtist.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Artist", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtReleaseDate.setBackground(new java.awt.Color(0, 0, 0));
        txtReleaseDate.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtReleaseDate.setForeground(new java.awt.Color(255, 255, 255));
        txtReleaseDate.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Release Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        txtGenre.setBackground(new java.awt.Color(0, 0, 0));
        txtGenre.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtGenre.setForeground(new java.awt.Color(255, 255, 255));
        txtGenre.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Genre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSave)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtSongId, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                        .addComponent(txtViews)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSongTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .addComponent(txtGenre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtArtist, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                            .addComponent(txtReleaseDate))
                        .addGap(68, 68, 68))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(btnUpdate)
                        .addGap(121, 121, 121)
                        .addComponent(btnClear)
                        .addContainerGap(219, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArtist, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSongTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSongId, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtViews, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdate)
                            .addComponent(btnSave)
                            .addComponent(btnClear)))
                    .addComponent(txtReleaseDate, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(529, Short.MAX_VALUE))
        );

        Tab3.addTab("Data Entry", jPanel2);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/musicapp/resources/large (2).png"))); // NOI18N

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(Tab3))
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel4))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Tab3, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 113, Short.MAX_VALUE))
        );

        pnlLoginScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoginScreen.setMaximumSize(new java.awt.Dimension(800, 600));
        pnlLoginScreen.setMinimumSize(new java.awt.Dimension(800, 600));
        pnlLoginScreen.setPreferredSize(new java.awt.Dimension(800, 600));
        pnlLoginScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtUsername.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtUsername.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rockwell Condensed", 1, 18))); // NOI18N
        pnlLoginScreen.add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 230, 420, 50));

        txtpassword.setFont(new java.awt.Font("Rockwell Condensed", 0, 14)); // NOI18N
        txtpassword.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rockwell Condensed", 1, 18))); // NOI18N
        pnlLoginScreen.add(txtpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 300, 420, 50));

        btnLogin.setFont(new java.awt.Font("Rockwell Condensed", 1, 48)); // NOI18N
        btnLogin.setText("Enter");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        pnlLoginScreen.add(btnLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 230, 70));

        jTextField1.setFont(new java.awt.Font("Rockwell Condensed", 1, 48)); // NOI18N
        jTextField1.setText(" LOGIN  ");
        pnlLoginScreen.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 200, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/musicapp/resources/peach-goma-peach-and-goma.gif"))); // NOI18N
        pnlLoginScreen.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, 190, 100));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnlLoadingScreen.setBackground(new java.awt.Color(255, 255, 255));
        pnlLoadingScreen.setPreferredSize(new java.awt.Dimension(12367, 12767));
        pnlLoadingScreen.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnlLoadingScreen.add(ProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 340, 275, 39));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/musicapp/resources/giphy.gif"))); // NOI18N
        pnlLoadingScreen.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 31, 509, 265));

        jLabel6.setFont(new java.awt.Font("Rockwell Condensed", 1, 14)); // NOI18N
        jLabel6.setText("Loading.....");
        pnlLoadingScreen.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, 190, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 917, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlLoadingScreen, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void loadDataFromFile() {
        File file = new File("music_data.txt");
        if (!file.exists()) {
            System.out.println("No existing music file found. Starting with an empty table.");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblMusic.getModel();
        model.setRowCount(0); // Clear any existing data in the table

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            boolean isFirstLine = true; // To skip the header line
            while ((line = reader.readLine()) != null) {
                // Skip the header line
                if (isFirstLine) {
                    isFirstLine = false;
                    continue;
                }

                // Split the line into columns
                String[] data = line.split(",");
                if (data.length == 6) { // Ensure there are exactly 6 columns
                    Object[] rowData = {
                        Integer.parseInt(data[0]), // Song ID
                        data[1], // Song Title
                        data[2], // Artist
                        Integer.parseInt(data[3]), // Views
                        data[4], // Genre
                        data[5] // Release Date
                    };
                    model.addRow(rowData); // Add the validated row to the table
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error parsing numeric data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveDataToFile() {
        try (FileWriter writer = new FileWriter("music_data.txt")) {
            DefaultTableModel model = (DefaultTableModel) tblMusic.getModel();
            int rowCount = model.getRowCount();
            int columnCount = model.getColumnCount();

            // Write each row of data to the file
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < columnCount; j++) {
                    writer.write(model.getValueAt(i, j).toString());
                    if (j < columnCount - 1) {
                        writer.write(","); // Separate columns with a comma
                    }
                }
                writer.write("\n"); // Newline after each row
            }
            writer.flush();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        String username = txtUsername.getText();
        String password = new String(txtpassword.getPassword());

        // Check if the username and password are correct
        if (username.equals("siya") && password.equals("siya123")) {
            // Show login success message
            JOptionPane.showMessageDialog(this, "Login Successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadScreen("MainScreen");  // Transition to the main screen
        } else {
            // Show login failure message
            JOptionPane.showMessageDialog(this, "Invalid Username or Password", "Login Failed", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
// Retrieve inputs from text fields
// Retrieve inputs from text fields
        String songId = txtSongId.getText();
        String songTitle = txtSongTitle.getText();
        String artist = txtArtist.getText();
        String genre = txtGenre.getText();
        String views = txtViews.getText();
        String releaseDate = txtReleaseDate.getText(); // Release Date as String

        // Validate input fields
        if (!MusicValidationUtil.isValidSongId(songId)) {
            JOptionPane.showMessageDialog(null, "Invalid Song ID. It should be numeric.", "Validation Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!MusicValidationUtil.isValidSongTitle(songTitle)) {
            JOptionPane.showMessageDialog(null, "Invalid Song Title. It should be alphanumeric (max 50 characters).", "Validation Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!MusicValidationUtil.isValidArtistName(artist)) {
            JOptionPane.showMessageDialog(null, "Invalid Artist Name. It should only contain letters.", "Validation Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!MusicValidationUtil.isValidGenre(genre)) {
            JOptionPane.showMessageDialog(null, "Invalid Genre. It should only contain letters.", "Validation Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!MusicValidationUtil.isValidViews(views)) {
            JOptionPane.showMessageDialog(null, "Invalid Views. It should be numeric.", "Validation Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!MusicValidationUtil.isValidReleaseDate(releaseDate)) {
            JOptionPane.showMessageDialog(null, "Invalid Release Date. Ensure it's not a future date and follows YYYY-MM-DD format.", "Validation Failed", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // If all validations pass, add the song to the table
        DefaultTableModel model = (DefaultTableModel) tblMusic.getModel();
        model.addRow(new Object[]{
            songId,
            songTitle,
            artist,
            views,
            genre,
            releaseDate
        });

        JOptionPane.showMessageDialog(null, "Song added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Save data to file
        saveDataToFile();

        // Optionally clear input fields
        txtSongId.setText("");
        txtSongTitle.setText("");
        txtArtist.setText("");
        txtGenre.setText("");
        txtViews.setText("");
        txtReleaseDate.setText("");
        // Song ID

        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = tblMusic.getSelectedRow(); // Get the selected row

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve updated values from text fields
        String songId = txtSongId.getText();
        String songTitle = txtSongTitle.getText();
        String artist = txtArtist.getText();
        String views = txtViews.getText();
        String genre = txtGenre.getText();
        String releaseDateStr = txtReleaseDate.getText(); // Assuming date input is in "YYYY-MM-DD" format

        // Validation
        if (!MusicValidationUtil.isValidSongId(songId)
                || !MusicValidationUtil.isValidSongTitle(songTitle)
                || !MusicValidationUtil.isValidArtistName(artist)) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please check your entries.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            LocalDate releaseDate = LocalDate.parse(releaseDateStr); // Parse release date

            // Update the row in the table
            DefaultTableModel model = (DefaultTableModel) tblMusic.getModel();
            model.setValueAt(songId, selectedRow, 0);
            model.setValueAt(songTitle, selectedRow, 1);
            model.setValueAt(artist, selectedRow, 2);
            model.setValueAt(views, selectedRow, 3);
            model.setValueAt(genre, selectedRow, 4);
            model.setValueAt(releaseDate, selectedRow, 5);

            JOptionPane.showMessageDialog(this, "Record updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Optionally clear fields
            clearFields();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid date format. Use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblMusic.getSelectedRow(); // Get the selected row

        // Validate if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete the selected record?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // Get the Song ID of the selected row
            DefaultTableModel model = (DefaultTableModel) tblMusic.getModel();
            String songId = model.getValueAt(selectedRow, 0).toString();

            // Remove the row from the table
            model.removeRow(selectedRow);

            // Save the updated table data to the file
            saveTableDataToFile();

            // Show success message
            JOptionPane.showMessageDialog(this, "Record deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the record.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

// Save the table data to the file
    private void saveTableDataToFile() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("music_data.txt"))) {
            DefaultTableModel model = (DefaultTableModel) tblMusic.getModel();

            // Write column headers
            writer.write("Song ID,Song Title,Artist,Views,Genre,Release Date");
            writer.newLine();

            // Write each row of the table
            for (int i = 0; i < model.getRowCount(); i++) {
                writer.write(
                        model.getValueAt(i, 0) + ","
                        + model.getValueAt(i, 1) + ","
                        + model.getValueAt(i, 2) + ","
                        + model.getValueAt(i, 3) + ","
                        + model.getValueAt(i, 4) + ","
                        + model.getValueAt(i, 5)
                );
                writer.newLine();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error saving data to file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();         // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveDataToFile();        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadDataFromFile(); // Load data from the file
        addListToTable();        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened
    private void clearFields() {
        txtSongId.setText("");
        txtSongTitle.setText("");
        txtArtist.setText("");
        txtViews.setText("");
        txtGenre.setText("");
        txtReleaseDate.setText("");
    }

    public void addListToTable() {
        DefaultTableModel tableModel = (DefaultTableModel) tblMusic.getModel();

        // Clear existing rows in the table
        tableModel.setRowCount(0);

        // Add each song from the list to the table
        for (MusicModel music : musicList) {
            tableModel.addRow(new Object[]{
                music.getSongId(),
                music.getSongTitle(),
                music.getArtist(),
                music.getView(),
                music.getGenre(),
                music.getReleaseDate()
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Musicapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Musicapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Musicapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Musicapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Musicapp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JTabbedPane Tab3;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel pnlLoadingScreen;
    private javax.swing.JPanel pnlLoginScreen;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JTable tblMusic;
    private javax.swing.JTextField txtArtist;
    private javax.swing.JTextField txtGenre;
    private javax.swing.JTextField txtReleaseDate;
    private javax.swing.JTextField txtSongId;
    private javax.swing.JTextField txtSongTitle;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtViews;
    private javax.swing.JPasswordField txtpassword;
    // End of variables declaration//GEN-END:variables
}
